*textobj-equation.txt*				Last change:12-Aug-2014.

The vim textobject plugin to selet a equation like text block.


Author  : machakann <mckn@outlook.jp>
License : NYSL license
          Japanese <http://www.kmonos.net/nysl/>
          English (Unofficial) <http://www.kmonos.net/nysl/index.en.html>

==============================================================================
CONTENTS				*textobj-equation-contents*

INTRODUCTION		|textobj-equation-introduction|
KEYMAPPINGS		|textobj-equation-keymappings|
CONFIGURATION		|textobj-equation-configuration|

==============================================================================
INTRODUCTION				*textobj-equation-introduction*

*textobj-equation* is a Vim plugin to implement textobjects to select a
equation-like text. This plugin serves you three textobjects,
|<Plug>(textobj-equation-i)|, |<Plug>(textobj-lhs-i)|,
|<Plug>(textobj-rhs-i)|. These textobjects are mapped to "iee", "iel", "ier"
in default.
>
	|<-iel->|   |<-ier->|
	abcdefghi = jklmnopqr
	|<-------iee------->|
<
In fact, the objectives are not limited to simple conventional equation. For
example:
>
	   |<-iel->|    |<-ier->|
	if abcdefghi == jklmnopqr
	   |<-------iee-------->|
<
The objectives of these textobjects can be configurable. See
|textobj-equation-configuration|.





==============================================================================
KEYMAPPINGS				*textobj-equation-keymappings*

This plugin serves following keymappings.

kind            keymappings                             default keymappings
--------------------------------------------------------------------------
equation        <Plug>(textobj-equation-i)              iee
  lhs           <Plug>(textobj-lhs-i)                   iel
  rhs           <Plug>(textobj-rhs-i)                   ier
--------------------------------------------------------------------------

If you do not need default keymappings, define a variable named
|g:textobj_equation_no_default_key_mappings| in your vimrc.
>
        let g:textobj_equation_no_default_key_mappings = 1
<
Then default mappings are never applied. And map them again as you like.
>
        xmap iee <Plug>(textobj-equation-i)
        omap iee <Plug>(textobj-equation-i)
        xmap iel <Plug>(textobj-lhs-i)
        omap iel <Plug>(textobj-lhs-i)
        xmap ier <Plug>(textobj-rhs-i)
        omap ier <Plug>(textobj-rhs-i)
<

------------------------------------------------------------------------------
keymappings~
<Plug>(textobj-equation-i)		*<Plug>(textobj-equation-i)*
	This keymapping selects a whole body of a equation. If the word under
	the cursor is not a equation, this keymapping searches a equation to
	the end of the line.

<Plug>(textobj-lhs-i)			*<Plug>(textobj-lhs-i)*
	This keymapping selects a left-hand side of a equation. If the word
	under the cursor is not a equation, this keymapping searches a
	equation to the end of the line.

<Plug>(textobj-rhs-i)			*<Plug>(textobj-rhs-i)*
	This keymapping selects a right-hand side of a equation. If the word
	under the cursor is not a equation, this keymapping searches a
	equation to the end of the line.





==============================================================================
CONFIGURATION				*textobj-equation-configuration*

                                 *g:textobj_equation_no_default_key_mappings*
g:textobj_equation_no_default_key_mappings
	If you define this valiable in your vimrc, default keymappings do not
	defined.

g:textobj_equation_patterns		*g:textobj_equation_patterns*
	You can extend the objectives of this plugin with the variable. This
	valiable should be a dictionary which has keys named "cont", and
	"list".
	The key "cont" has a list which tells line-continuation
	characters. The list should have two strings, the first one is a
	preposed line-continuation character and the other is a postposed
	line-continuation character.
	The key "list" has a list of lists including regular expression
	patterns to search for a equation. The list has four factors. The
	first one is a regular expression matching with a equation operator,
	like "=", and "==". The second and the third are regular expressions
	matching with a string which delimits the head and the tail of a
	equation. For example "||" and "&&" delimit the head and tail of a
	equation in several languages.  The last one is a list of lists which
	are possible to surround a equation. The following example is the
	equivalent for the default setting.
>
	let g:textobj_equation_patterns = {}
	let g:textobj_equation_patterns.cont = ['', '']
	let g:textobj_equation_patterns.list = [
	\   ['[+*/-]\?=', '', '', [['(', ')']]],
	\   ['\%(==\|<>\|!=\|[<>]=\?\)', '\%(|\{1,2}\|&\{1,2}\)',
	\                       '\%(|\{1,2}\|&\{1,2}\)', [['(', ')']]],
	\ ]
<

	The other scopes, "b:", "w:", "t:", also could be used for same name.
	If more than two valiables could be referable, they are used in the
	order of "b:", "w:", "t:", "g:". Especially
	b:textobj_equation_patterns is useful to define filetype-dependent
	configurations.

------------------------------------------------------------------------------
filetype-dependent configurations~

Following patterns are defined automatically when the filetype is determined.

vim~
>
	let b:textobj_equation_patterns = {}
	let b:textobj_equation_patterns.cont = ['\\', '']
	let b:textobj_equation_patterns.list = [
	\   ['[+*/-]\?=', 'let', '', [['(', ')']]],
	\   ['\%(==\|!=\|[<>]=\?\)', '\%(||\|&&\|=\)',
	\                            '\%(||\|&&\|?\)', [['(', ')']]],
	\ ]
<


Fortran~
>
	let b:textobj_equation_patterns = {}
	let b:textobj_equation_patterns.cont = ['&', '&']
	let b:textobj_equation_patterns.list = [
	\   ['[+*/-]\?=', '::', '', [['(', ')']]],
	\   ['\%(==\|/=\|[<>]=\?\|\.lt\.\|\.le\.\|\.eq\.\|\.ne\.\|\.gt\.\|\.ge\.\)',
	\    '\%(\.not\.\|\.and\.\|\.or\.\|\.eqv\.\|\.neqv\.\)',
	\    '\%(\.not\.\|\.and\.\|\.or\.\|\.eqv\.\|\.neqv\.\)',
	\    [['(', ')']]],
	\ ]
<





==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:
